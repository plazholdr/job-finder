{
  "info": {
    "name": "Job Finder API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "5f5a2d0b-3ab6-4f7b-8b24-1f4cf6eb2ac9"
  },
  "auth": {
    "type": "bearer",
    "bearer": [ { "key": "token", "value": "{{accessToken}}", "type": "string" } ]
  },
  "item": [
    {
      "name": "Health",
      "item": [
        {
          "name": "GET /health",
          "request": {
            "method": "GET",
            "header": [],
            "auth": { "type": "noauth" },
            "url": { "raw": "{{baseUrl}}/health", "host": ["{{baseUrl}}"], "path": ["health"] }
          }
        }
      ]
    },
    {
      "name": "Auth",
      "item": [
        {
          "name": "POST /authentication (login)",
          "request": {
            "method": "POST",
            "header": [ {"key":"Content-Type","value":"application/json"} ],
            "body": { "mode": "raw", "raw": "{\n  \"strategy\": \"local\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}" },
            "url": { "raw": "{{baseUrl}}/authentication", "host": ["{{baseUrl}}"], "path": ["authentication"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 201 || pm.response.code === 200) {",
                  "  const json = pm.response.json();",
                  "  if (json.accessToken) pm.environment.set('accessToken', json.accessToken);",
                  "  if (json.refreshToken) pm.environment.set('refreshToken', json.refreshToken);",
                  "  if (json.user && json.user._id) pm.environment.set('userId', json.user._id);",
                  "  if (json.user && json.user.role) pm.environment.set('role', json.user.role);",
                  "  try {",
                  "    const parts = json.accessToken.split('.')",
                  "    const payload = JSON.parse(atob(parts[1]));",
                  "    if (payload.exp) pm.environment.set('tokenExpiresAt', (payload.exp*1000).toString());",
                  "  } catch (e) { /* ignore */ }",
                  "} else {",
                  "  console.warn('Login failed:', pm.response.code);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /password-reset (request reset email)",
          "request": {
            "method": "POST",
            "header": [ {"key":"Content-Type","value":"application/json"} ],
            "body": { "mode": "raw", "raw": "{\n  \"email\": \"{{email}}\"\n}" },
            "url": { "raw": "{{baseUrl}}/password-reset", "host": ["{{baseUrl}}"], "path": ["password-reset"] }
          }
        },
        {
          "name": "PATCH /password-reset (reset with token)",
          "request": {
            "method": "PATCH",
            "header": [ {"key":"Content-Type","value":"application/json"} ],
            "body": { "mode": "raw", "raw": "{\n  \"token\": \"{{resetToken}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{newPassword}}\"\n}" },
            "url": { "raw": "{{baseUrl}}/password-reset", "host": ["{{baseUrl}}"], "path": ["password-reset"] }
          }
        },
        {
          "name": "POST /email-verification (request verification)",
          "request": {
            "method": "POST",
            "header": [ {"key":"Content-Type","value":"application/json"} ],
            "body": { "mode": "raw", "raw": "{\n  \"email\": \"{{email}}\"\n}" },
            "url": { "raw": "{{baseUrl}}/email-verification", "host": ["{{baseUrl}}"], "path": ["email-verification"] }
          }
        },
        {
          "name": "PATCH /email-verification (verify with token)",
          "request": {
            "method": "PATCH",
            "header": [ {"key":"Content-Type","value":"application/json"} ],
            "body": { "mode": "raw", "raw": "{\n  \"token\": \"{{verificationToken}}\",\n  \"email\": \"{{email}}\"\n}" },
            "url": { "raw": "{{baseUrl}}/email-verification", "host": ["{{baseUrl}}"], "path": ["email-verification"] }
          }
        },
        {
          "name": "POST /refresh-token",
          "request": {
            "method": "POST",
            "header": [ {"key":"Content-Type","value":"application/json"} ],
            "body": { "mode": "raw", "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}" },
            "url": { "raw": "{{baseUrl}}/refresh-token", "host": ["{{baseUrl}}"], "path": ["refresh-token"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 201 || pm.response.code === 200) {",
                  "  const json = pm.response.json();",
                  "  if (json.accessToken) pm.environment.set('accessToken', json.accessToken);",
                  "  if (json.refreshToken) pm.environment.set('refreshToken', json.refreshToken);",
                  "  try {",
                  "    const parts = json.accessToken.split('.')",
                  "    const payload = JSON.parse(atob(parts[1]));",
                  "    if (payload.exp) pm.environment.set('tokenExpiresAt', (payload.exp*1000).toString());",
                  "  } catch (e) { /* ignore */ }",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "POST /users (register student)",
          "request": {
            "method": "POST",
            "header": [ {"key":"Content-Type","value":"application/json"} ],
            "body": { "mode": "raw", "raw": "{\n  \"email\": \"student1@example.com\",\n  \"password\": \"Passw0rd!\",\n  \"role\": \"student\",\n  \"profile\": { \"firstName\": \"Ali\", \"lastName\": \"Bin Abu\" }\n}" },
            "url": { "raw": "{{baseUrl}}/users", "host": ["{{baseUrl}}"], "path": ["users"] }
          }
        },
        {
          "name": "POST /users (register company admin)",
          "request": {
            "method": "POST",
            "header": [ {"key":"Content-Type","value":"application/json"} ],
            "body": { "mode": "raw", "raw": "{\n  \"email\": \"company1@example.com\",\n  \"password\": \"Passw0rd!\",\n  \"role\": \"company\",\n  \"companyProfile\": { \"companyName\": \"Acme Sdn Bhd\" }\n}" },
            "url": { "raw": "{{baseUrl}}/users", "host": ["{{baseUrl}}"], "path": ["users"] }
          }
        },
        {
          "name": "GET /users/:id (me)",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/users/{{userId}}", "host": ["{{baseUrl}}"], "path": ["users","{{userId}}"] }
          }
        },
        {
          "name": "GET /users?role=student (search)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users?role=student",
              "host": ["{{baseUrl}}"],
              "path": ["users"],
              "query": [ {"key":"role","value":"student"} ]
            }
          }
        },
        {
          "name": "PATCH /users/:id (update self)",
          "request": {
            "method": "PATCH",
            "header": [ {"key":"Content-Type","value":"application/json"} ],
            "body": { "mode": "raw", "raw": "{\n  \"profile\": { \"bio\": \"Hello world\" }\n}" },
            "url": { "raw": "{{baseUrl}}/users/{{userId}}", "host": ["{{baseUrl}}"], "path": ["users","{{userId}}"] }
          }
        }
      ]
    },
    {
      "name": "Companies",
      "item": [
        {
          "name": "POST /companies (create)",
          "request": {
            "method": "POST",
            "header": [ { "key":"Content-Type","value":"application/json" } ],
            "body": { "mode": "raw", "raw": "{\n  \"name\": \"Acme Sdn Bhd\",\n  \"registrationNumber\": \"202401234567\",\n  \"phone\": \"+603-1234 5678\",\n  \"industry\": \"IT\",\n  \"size\": \"51-200\",\n  \"website\": \"https://acme.my\"\n}" },
            "url": { "raw": "{{baseUrl}}/companies", "host": ["{{baseUrl}}"], "path": ["companies"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 201 || pm.response.code === 200) {",
                  "  const json = pm.response.json();",
                  "  if (json._id) pm.environment.set('companyId', json._id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /companies (search)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/companies?$limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["companies"],
              "query": [ {"key":"$limit","value":"10"} ]
            }
          }
        },
        {
          "name": "GET /companies/:id",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/companies/{{companyId}}", "host": ["{{baseUrl}}"], "path": ["companies","{{companyId}}"] }
          }
        },
        {
          "name": "PATCH /companies/:id (update)",
          "request": {
            "method": "PATCH",
            "header": [ { "key":"Content-Type","value":"application/json" } ],
            "body": { "mode": "raw", "raw": "{\n  \"description\": \"Updated company description\"\n}" },
            "url": { "raw": "{{baseUrl}}/companies/{{companyId}}", "host": ["{{baseUrl}}"], "path": ["companies","{{companyId}}"] }
          }
        }
      ]
    },
    {
      "name": "Company Verifications",
      "item": [
        {
          "name": "POST /company-verifications (submit KYC)",
          "request": {
            "method": "POST",
            "header": [ { "key":"Content-Type","value":"application/json" } ],
            "body": { "mode": "raw", "raw": "{\n  \"companyId\": \"{{companyId}}\",\n  \"documents\": [ { \"type\": \"SSM_SUPERFORM\", \"fileKey\": \"uploads/ssm.pdf\" } ]\n}" },
            "url": { "raw": "{{baseUrl}}/company-verifications", "host": ["{{baseUrl}}"], "path": ["company-verifications"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 201 || pm.response.code === 200) {",
                  "  const json = pm.response.json();",
                  "  if (json._id) pm.environment.set('verificationId', json._id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /company-verifications (mine)",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/company-verifications", "host": ["{{baseUrl}}"], "path": ["company-verifications"] }
          }
        },
        {
          "name": "GET /company-verifications/:id",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/company-verifications/{{verificationId}}", "host": ["{{baseUrl}}"], "path": ["company-verifications","{{verificationId}}"] }
          }
        },
        {
          "name": "PATCH /company-verifications/:id (admin approve)",
          "request": {
            "method": "PATCH",
            "header": [ { "key":"Content-Type","value":"application/json" } ],
            "body": { "mode": "raw", "raw": "{\n  \"action\": \"approve\"\n}" },
            "url": { "raw": "{{baseUrl}}/company-verifications/{{verificationId}}", "host": ["{{baseUrl}}"], "path": ["company-verifications","{{verificationId}}"] }
          }
        },
        {
          "name": "PATCH /company-verifications/:id (admin reject)",
          "request": {
            "method": "PATCH",
            "header": [ { "key":"Content-Type","value":"application/json" } ],
            "body": { "mode": "raw", "raw": "{\n  \"action\": \"reject\",\n  \"rejectionReason\": \"Missing required documents\"\n}" },
            "url": { "raw": "{{baseUrl}}/company-verifications/{{verificationId}}", "host": ["{{baseUrl}}"], "path": ["company-verifications","{{verificationId}}"] }
          }
        }
      ]
    },
    {
      "name": "Invites",
      "item": [
        {
          "name": "POST /invites (company)",
          "request": {
            "method": "POST",
            "header": [ { "key":"Content-Type","value":"application/json" } ],
            "body": { "mode": "raw", "raw": "{\n  \"type\": \"profile_access\",\n  \"userId\": \"{{targetUserId}}\",\n  \"message\": \"We'd like to view your full profile.\"\n}" },
            "url": { "raw": "{{baseUrl}}/invites", "host": ["{{baseUrl}}"], "path": ["invites"] }
          }
        },
        {
          "name": "PATCH /invites/:id (student accept/decline)",
          "request": {
            "method": "PATCH",
            "header": [ { "key":"Content-Type","value":"application/json" } ],
            "body": { "mode": "raw", "raw": "{\n  \"status\": \"accepted\"\n}" },
            "url": { "raw": "{{baseUrl}}/invites/{{inviteId}}", "host": ["{{baseUrl}}"], "path": ["invites","{{inviteId}}"] }
          }
        }
      ]
    },
    {
      "name": "Notifications",
      "item": [
        {
          "name": "GET /notifications (mine)",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/notifications", "host": ["{{baseUrl}}"], "path": ["notifications"] }
          }
        }
      ]
    },
    {
      "name": "Shortlists",
      "item": [
        {
          "name": "POST /shortlists (company)",
          "request": {
            "method": "POST",
            "header": [ { "key":"Content-Type","value":"application/json" } ],
            "body": { "mode": "raw", "raw": "{\n  \"userId\": \"{{targetUserId}}\",\n  \"note\": \"Promising profile\"\n}" },
            "url": { "raw": "{{baseUrl}}/shortlists", "host": ["{{baseUrl}}"], "path": ["shortlists"] }
          }
        },
        {
          "name": "GET /shortlists (mine)",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/shortlists", "host": ["{{baseUrl}}"], "path": ["shortlists"] }
          }
        }
      ]
    },
    {
      "name": "Favorites",
      "item": [
        {
          "name": "POST /favorites (student)",
          "request": {
            "method": "POST",
            "header": [ { "key":"Content-Type","value":"application/json" } ],
            "body": { "mode": "raw", "raw": "{\n  \"companyId\": \"{{companyId}}\"\n}" },
            "url": { "raw": "{{baseUrl}}/favorites", "host": ["{{baseUrl}}"], "path": ["favorites"] }
          }
        },
        {
          "name": "GET /favorites (mine)",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/favorites", "host": ["{{baseUrl}}"], "path": ["favorites"] }
          }
        }
      ]
    },
    {
      "name": "Threads & Messages",
      "item": [
        {
          "name": "POST /threads (open or get existing)",
          "request": {
            "method": "POST",
            "header": [ { "key":"Content-Type","value":"application/json" } ],
            "body": { "mode": "raw", "raw": "{\n  \"companyId\": \"{{companyId}}\",\n  \"userId\": \"{{targetUserId}}\"\n}" },
            "url": { "raw": "{{baseUrl}}/threads", "host": ["{{baseUrl}}"], "path": ["threads"] }
          }
        },
        {
          "name": "POST /messages (send)",
          "request": {
            "method": "POST",
            "header": [ { "key":"Content-Type","value":"application/json" } ],
            "body": { "mode": "raw", "raw": "{\n  \"threadId\": \"{{threadId}}\",\n  \"body\": \"Hello!\"\n}" },
            "url": { "raw": "{{baseUrl}}/messages", "host": ["{{baseUrl}}"], "path": ["messages"] }
          }
        }
      ]
    },
    {
      "name": "Upload",
      "item": [
        {
          "name": "POST /upload (resume)",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                { "key": "resume", "type": "file", "src": "{{resumePath}}" }
              ]
            },
            "url": { "raw": "{{baseUrl}}/upload", "host": ["{{baseUrl}}"], "path": ["upload"] }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-refresh access token if expired",
          "const accessToken = pm.environment.get('accessToken');",
          "const tokenExpiresAt = pm.environment.get('tokenExpiresAt');",
          "",
          "if (accessToken && tokenExpiresAt) {",
          "  const now = Date.now();",
          "  const expiresAt = parseInt(tokenExpiresAt);",
          "  ",
          "  // Refresh if token expires within 1 minute",
          "  if (now >= (expiresAt - 60000)) {",
          "    console.log('Access token expired or expiring soon, refreshing...');",
          "    ",
          "    const refreshToken = pm.environment.get('refreshToken');",
          "    if (refreshToken) {",
          "      const refreshRequest = {",
          "        url: pm.environment.get('baseUrl') + '/refresh-token',",
          "        method: 'POST',",
          "        header: { 'Content-Type': 'application/json' },",
          "        body: { mode: 'raw', raw: JSON.stringify({ refreshToken }) }",
          "      };",
          "      ",
          "      pm.sendRequest(refreshRequest, (err, res) => {",
          "        if (err) {",
          "          console.log('Token refresh failed:', err);",
          "          return;",
          "        }",
          "        ",
          "        if (res.code === 201 || res.code === 200) {",
          "          const json = res.json();",
          "          if (json.accessToken) {",
          "            pm.environment.set('accessToken', json.accessToken);",
          "            console.log('Access token refreshed successfully');",
          "            ",
          "            // Decode and set expiration",
          "            try {",
          "              const parts = json.accessToken.split('.');",
          "              const payload = JSON.parse(atob(parts[1]));",
          "              if (payload.exp) {",
          "                pm.environment.set('tokenExpiresAt', payload.exp * 1000);",
          "              }",
          "            } catch (e) {",
          "              console.log('Could not decode token expiration:', e);",
          "            }",
          "          }",
          "          if (json.refreshToken) {",
          "            pm.environment.set('refreshToken', json.refreshToken);",
          "          }",
          "        } else {",
          "          console.log('Token refresh failed with status:', res.code);",
          "        }",
          "      });",
          "    }",
          "  }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Handle 401 responses by refreshing token and retrying",
          "if (pm.response.code === 401) {",
          "  console.log('Received 401, attempting token refresh...');",
          "  ",
          "  const refreshToken = pm.environment.get('refreshToken');",
          "  if (refreshToken) {",
          "    const refreshRequest = {",
          "      url: pm.environment.get('baseUrl') + '/refresh-token',",
          "      method: 'POST',",
          "      header: { 'Content-Type': 'application/json' },",
          "      body: { mode: 'raw', raw: JSON.stringify({ refreshToken }) }",
          "    };",
          "    ",
          "    pm.sendRequest(refreshRequest, (err, res) => {",
          "      if (err) {",
          "        console.log('Token refresh failed:', err);",
          "        return;",
          "      }",
          "      ",
          "      if (res.code === 201 || res.code === 200) {",
          "        const json = res.json();",
          "        if (json.accessToken) {",
          "          pm.environment.set('accessToken', json.accessToken);",
          "          console.log('Token refreshed, please retry the request');",
          "          ",
          "          // Decode and set expiration",
          "          try {",
          "            const parts = json.accessToken.split('.');",
          "            const payload = JSON.parse(atob(parts[1]));",
          "            if (payload.exp) {",
          "              pm.environment.set('tokenExpiresAt', payload.exp * 1000);",
          "            }",
          "          } catch (e) {",
          "            console.log('Could not decode token expiration:', e);",
          "          }",
          "        }",
          "        if (json.refreshToken) {",
          "          pm.environment.set('refreshToken', json.refreshToken);",
          "        }",
          "      } else {",
          "        console.log('Token refresh failed with status:', res.code);",
          "        console.log('Please login again');",
          "      }",
          "    });",
          "  } else {",
          "    console.log('No refresh token available, please login again');",
          "  }",
          "}"
        ]
      }
    }
  ]
}


openapi: 3.0.3
info:
  title: Job Finder Backend API
  version: 1.0.0
  description: |
    OpenAPI for the Job Finder (FeathersJS) backend.
    Authentication uses JWT. Send `Authorization: Bearer <token>` for secured endpoints.
servers:
  - url: http://localhost:3030
    description: Local dev
security:
  - bearerAuth: []

paths:
  /health:
    get:
      summary: Health check
      tags: [System]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  timestamp: { type: string, format: date-time }
                  uptime: { type: number }

  /authentication:
    post:
      summary: Login (email or username)
      description: Provide either `email` or `username` along with `password` and `strategy=local`.
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [strategy, password]
              properties:
                strategy:
                  type: string
                  example: local
                email:
                  type: string
                  format: email
                username:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /refresh-token:
    post:
      summary: Refresh access token
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken: { type: string }
      responses:
        '201':
          description: New tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /email-verification:
    post:
      summary: Request email verification token
      description: Generates a verification token and sends it via in-app notification. Optionally pass `email`; otherwise the authenticated user is used if available.
      tags: [Auth]
      security: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '201':
          description: Token generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
    patch:
      summary: Verify email with token or 6-digit code
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token: { type: string, description: Token from the link }
                code: { type: string, description: 6-digit OTP code }
                email: { type: string, format: email }
      responses:
        '200':
          description: Email verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
  /email-verification/resend:
    post:
      summary: Resend email verification (current user)
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Token/code re-sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }


  /users:
    post:
      summary: Register user
      description: If `username` is not provided, `email` will be used as the identifier and normalized to username.
      tags: [Users]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    get:
      summary: List users (JWT)
      description: |
        Company users must be verified to browse students. Supports filters.
        Private student profiles are excluded from company search results; restricted profiles hide name/email/phone.
      tags: [Users]
      parameters:
        - in: query
          name: keyword
          schema: { type: string }
          description: Search by first/last name or skills
        - in: query
          name: university
          schema: { type: string }
        - in: query
          name: major
          schema: { type: string }
        - in: query
          name: skill
          schema: { type: array, items: { type: string } }
          style: form
          explode: true
          description: May be provided multiple times
        - in: query
          name: city
          schema: { type: string }
        - in: query
          name: gpaMin
          schema: { type: number }
        - in: query
          name: gpaMax
          schema: { type: number }
        - in: query
          name: gradYear
          schema: { type: integer }
      responses:
        '200':
          description: Paged users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
        '403':
          description: Company verification required

  /users/{id}:
    get:
      summary: Get a user by id (JWT)
      description: Companies cannot view private student profiles (404).
      tags: [Users]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: The user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not found (private profile or no access)
    patch:
      summary: Update own user (JWT)
      tags: [Users]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatch'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /companies:
    get:
      summary: List companies (JWT)
      description: |
        Supports search, filters, sorting, and recommendations.
        Query params:
        - q/keyword: search by company name
        - industry/nature: business nature filter
        - city/location: location filter (address.city or fullAddress)
  /company-verifications:
    get:
      summary: List company verifications
      description: Admins see all; company users see only their own submissions.
      tags: [Admin, Companies]
      parameters:
        - in: query
          name: status
          schema: { type: string, enum: [pending, approved, rejected] }
      responses:
        '200':
          description: Paged company verifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCompanyVerifications'
    post:
      summary: Submit company verification (KYC)
      tags: [Companies]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyVerificationCreate'
      responses:
        '201':
          description: Submitted verification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyVerification'

  /company-verifications/{id}:
    get:
      summary: Get a company verification by id
      tags: [Admin, Companies]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: The verification record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyVerification'
    patch:
      summary: Approve/Reject a company verification (Admin only)
      tags: [Admin]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action]
              properties:
                action: { type: string, enum: [approve, reject] }
                rejectionReason: { type: string }
      responses:
        '200':
          description: Updated verification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyVerification'

        - salaryMin, salaryMax: filter by internships' salary range
        - latest=true or sort=latest
        - sortBy=name|salary
        - recommended=true (uses user.internProfile.preferences.industries)
      tags: [Companies]
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: keyword
          schema: { type: string }
        - in: query
          name: industry
          schema: { type: string }
        - in: query
          name: nature
          schema: { type: string }
        - in: query
          name: city
          schema: { type: string }
        - in: query
          name: location
          schema: { type: string }
        - in: query
          name: salaryMin
          schema: { type: number }
        - in: query
          name: salaryMax
          schema: { type: number }
        - in: query
          name: latest
          schema: { type: boolean }
        - in: query
          name: sort
          schema: { type: string, enum: [latest] }
        - in: query
          name: sortBy
          schema: { type: string, enum: [name, salary] }
        - in: query
          name: recommended
          schema: { type: boolean }
      responses:
        '200':
          description: Paged companies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCompanies'
    post:
      summary: Create company profile (company role only)
      tags: [Companies]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyCreate'
      responses:
        '201':
          description: Created company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'

  /companies/{id}:
    get:
      summary: Get company by id (JWT)
      tags: [Companies]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Company detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
    patch:
      summary: Update company (owner/admin)
      tags: [Companies]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyPatch'
      responses:
        '200':
          description: Updated company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    IdParam:
      in: path
      name: id
      required: true
      schema: { type: string }

  schemas:
    AuthResponse:
      type: object
      properties:
        accessToken: { type: string }
        refreshToken: { type: string }
        authentication:
          type: object
          properties:
            strategy: { type: string }
        user:
          $ref: '#/components/schemas/User'

    UserCreate:
      type: object
      required: [password]
      properties:
        email: { type: string, format: email }
        username: { type: string }
        password: { type: string, minLength: 6 }
        role:
          type: string
          description: Defaults to student
          enum: [student, company, admin]
        privacySetting:
          type: string
          description: Student profile privacy. Default full.
          enum: [full, restricted, private]
        profile:
          type: object
          properties:
            firstName: { type: string }
            lastName: { type: string }
            phone: { type: string }
            avatar: { type: string }
            icPassportNumber: { type: string }
        internProfile:
          type: object
          properties:
            university: { type: string }
            major: { type: string }
            graduationYear: { type: integer }
            skills: { type: array, items: { type: string } }
            preferences:
              type: object
              properties:
                industries: { type: array, items: { type: string } }
    UserPatch:
      type: object
      properties:
        privacySetting:
          type: string
          enum: [full, restricted, private]
        profile: { $ref: '#/components/schemas/UserCreate/properties/profile' }
        internProfile: { $ref: '#/components/schemas/UserCreate/properties/internProfile' }
    User:
      allOf:
        - $ref: '#/components/schemas/UserCreate'
        - type: object
          properties:
            _id: { type: string }
            isEmailVerified: { type: boolean }
            createdAt: { type: string, format: date-time }
            updatedAt: { type: string, format: date-time }
    PaginatedUsers:
      type: object
      properties:
        total: { type: integer }
        limit: { type: integer }
        skip: { type: integer }
        data:
          type: array
          items: { $ref: '#/components/schemas/User' }

    InternshipJob:
      type: object
      properties:
        title: { type: string }
        description: { type: string }
        postedAt: { type: string, format: date-time }
        duration: { type: string }
        location: { type: string }
        salaryRange:
          type: object
          properties:
            min: { type: number }
            max: { type: number }

    CompanyCreate:
      type: object
      required: [name]
      properties:
        name: { type: string }
        industry: { type: string }
        website: { type: string }
        description: { type: string }
        email: { type: string }
        phone: { type: string }
        address:
          type: object
          properties:
            street: { type: string }
            city: { type: string }
            state: { type: string }
            country: { type: string }
            zipCode: { type: string }
            fullAddress: { type: string }
        internships:
          type: array
          items: { $ref: '#/components/schemas/InternshipJob' }
    CompanyPatch:
      type: object
      properties:
        name: { type: string }
        industry: { type: string }
        website: { type: string }
        description: { type: string }
        address: { $ref: '#/components/schemas/CompanyCreate/properties/address' }
        internships:
          type: array
          items: { $ref: '#/components/schemas/InternshipJob' }
    Company:
      allOf:
        - $ref: '#/components/schemas/CompanyCreate'
        - type: object
          properties:
            _id: { type: string }
            ownerUserId: { type: string }
            logoKey: { type: string }
            verifiedStatus:
              type: string
              enum: [pending, approved, rejected]
            internshipListingCount: { type: integer }
            internshipTopTitles:
              type: array
              items: { type: string }
            createdAt: { type: string, format: date-time }
            updatedAt: { type: string, format: date-time }
    PaginatedCompanies:
      type: object
      properties:
        total: { type: integer }
        limit: { type: integer }
        skip: { type: integer }
        data:
          type: array
          items: { $ref: '#/components/schemas/Company' }


    CompanyVerificationDocument:
      type: object
      properties:
        type: { type: string, enum: [SSM_SUPERFORM, OTHERS] }
        fileKey: { type: string }
        metadata: { type: object }
    CompanyVerificationCreate:
      type: object
      required: [companyId, documents]
      properties:
        companyId: { type: string }
        documents:
          type: array
          items: { $ref: '#/components/schemas/CompanyVerificationDocument' }
    CompanyVerification:
      allOf:
        - $ref: '#/components/schemas/CompanyVerificationCreate'
        - type: object
          properties:
            _id: { type: string }
            submittedBy: { type: string }
            status: { type: string, enum: [pending, approved, rejected] }
            rejectionReason: { type: string }
            submittedAt: { type: string, format: date-time }
            reviewedAt: { type: string, format: date-time }
            reviewerId: { type: string }
    PaginatedCompanyVerifications:
      type: object
      properties:
        total: { type: integer }
        limit: { type: integer }
        skip: { type: integer }
        data:
          type: array
          items: { $ref: '#/components/schemas/CompanyVerification' }

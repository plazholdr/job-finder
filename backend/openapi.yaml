openapi: 3.0.3
info:
  title: Job Finder Backend API
  version: 1.0.0
  description: |
    OpenAPI for the Job Finder (FeathersJS) backend.
    Authentication uses JWT. Send `Authorization: Bearer <token>` for secured endpoints.
servers:
  - url: https://jobfinder.saino365.com/api
    description: Production
  - url: http://localhost:3030
    description: Local dev
security:
  - bearerAuth: []

paths:
  /health:
    get:
      summary: Health check
      tags: [System]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  timestamp: { type: string, format: date-time }
                  uptime: { type: number }

  /authentication:
    post:
      summary: Login (email or username)
      description: Provide either `email` or `username` along with `password` and `strategy=local`.
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [strategy, password]
              properties:
                strategy:
                  type: string
                  example: local
                email:
                  type: string
                  format: email
                username:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /refresh-token:
    post:
      summary: Refresh access token
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken: { type: string }
      responses:
        '201':
          description: New tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /email-verification:
    post:
      summary: Request email verification token
      description: Generates a verification token and sends it via in-app notification. Optionally pass `email`; otherwise the authenticated user is used if available.
      tags: [Auth]
      security: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '201':
          description: Token generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
    patch:
      summary: Verify email with token or 6-digit code
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token: { type: string, description: Token from the link }
                code: { type: string, description: 6-digit OTP code }
                email: { type: string, format: email }
      responses:
        '200':
          description: Email verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
  /email-verification/resend:
    post:
      summary: Resend email verification (current user)
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Token/code re-sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }


  /users:
    post:
      summary: Register user
      description: If `username` is not provided, `email` will be used as the identifier and normalized to username.
      tags: [Users]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    get:
      summary: List users (JWT)
      description: |
        Company users must be verified to browse students. Supports filters.
        Private student profiles are excluded from company search results; restricted profiles hide name/email/phone.
      tags: [Users]
      parameters:
        - in: query
          name: keyword
          schema: { type: string }
          description: Search by first/last name or skills
        - in: query
          name: university
          schema: { type: string }
        - in: query
          name: major
          schema: { type: string }
        - in: query
          name: skill
          schema: { type: array, items: { type: string } }
          style: form
          explode: true
          description: May be provided multiple times
        - in: query
          name: city
          schema: { type: string }
        - in: query
          name: gpaMin
          schema: { type: number }
        - in: query
          name: gpaMax
          schema: { type: number }
        - in: query
          name: gradYear
          schema: { type: integer }
      responses:
        '200':
          description: Paged users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
        '403':
          description: Company verification required

  /users/{id}:
    get:
      summary: Get a user by id (JWT)
      description: Companies cannot view private student profiles (404).
      tags: [Users]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: The user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not found (private profile or no access)
    patch:
      summary: Update own user (JWT)
      tags: [Users]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatch'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /company-verifications:
    get:
      summary: List company verifications
      description: Admins see all; company users see only their own submissions.
      tags: [Admin, Companies]
      parameters:
        - in: query
          name: status
          schema: { type: string, enum: [pending, approved, rejected] }
      responses:
        '200':
          description: Paged company verifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCompanyVerifications'
    post:
      summary: Submit company verification (KYC)
      tags: [Companies]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyVerificationCreate'
      responses:
        '201':
          description: Submitted verification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyVerification'

  /company-verifications/{id}:
    get:
      summary: Get a company verification by id
      tags: [Admin, Companies]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: The verification record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyVerification'
    patch:
      summary: Approve/Reject a company verification (Admin only)
      tags: [Admin]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action]
              properties:
                action: { type: string, enum: [approve, reject] }
                rejectionReason: { type: string }
      responses:
        '200':
          description: Updated verification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyVerification'

  /companies:
    get:
      summary: Search and filter companies
      description: |
        Search companies with various filters:
        - salaryMin, salaryMax: filter by internships' salary range
        - latest=true or sort=latest
        - sortBy=name|salary
        - recommended=true (uses user.internProfile.preferences.industries)
      tags: [Companies]
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: keyword
          schema: { type: string }
        - in: query
          name: industry
          schema: { type: string }
        - in: query
          name: nature
          schema: { type: string }
        - in: query
          name: city
          schema: { type: string }
        - in: query
          name: location
          schema: { type: string }
        - in: query
          name: salaryMin
          schema: { type: number }
        - in: query
          name: salaryMax
          schema: { type: number }
        - in: query
          name: latest
          schema: { type: boolean }
        - in: query
          name: sort
          schema: { type: string, enum: [latest] }
        - in: query
          name: sortBy
          schema: { type: string, enum: [name, salary] }
        - in: query
          name: recommended
          schema: { type: boolean }
      responses:
        '200':
          description: Paged companies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCompanies'
    post:
      summary: Create company profile (company role only)
      tags: [Companies]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyCreate'
      responses:
        '201':
          description: Created company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'

  /companies/{id}:
    get:
      summary: Get company by id (JWT)
      tags: [Companies]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Company detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
    patch:
      summary: Update company (owner/admin)
      tags: [Companies]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyPatch'
      responses:
        '200':
          description: Updated company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'

  /search-profiles:
    get:
      summary: List my search profiles (JWT)
      tags: [Search Profiles]
      parameters:
        - in: query
          name: kind
          schema: { type: string, enum: [intern, company] }
      responses:
        '200':
          description: My profiles
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/SearchProfile' }
    post:
      summary: Upsert my search profile by kind (JWT)
      description: Creates or updates a single profile per kind ('intern' for company users; 'company' for students).
      tags: [Search Profiles]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [kind]
              properties:
                kind: { type: string, enum: [intern, company] }
                name: { type: string }
                filters: { $ref: '#/components/schemas/SearchProfileFilters' }
      responses:
        '201':
          description: Created/Updated profile
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SearchProfile' }

  /search-profiles/{id}:
    get:
      summary: Get my search profile by id (JWT)
      tags: [Search Profiles]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: The profile
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SearchProfile' }
    patch:
      summary: Update my search profile (JWT)
      tags: [Search Profiles]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                filters: { $ref: '#/components/schemas/SearchProfileFilters' }
      responses:
        '200':
          description: Updated profile
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SearchProfile' }
    delete:
      summary: Delete my search profile (JWT)
      tags: [Search Profiles]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string }


  /job-listings:
    get:
      summary: Browse job listings (JWT)
      description: Students see ACTIVE listings. Companies see their own. Admin sees all.
      tags: [Jobs]
      responses:
        '200':
          description: Paged job listings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedJobListings'
    post:
      summary: Create job listing (company)
      tags: [Jobs]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobListingCreate'
      responses:
        '201':
          description: Created listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobListing'

  /job-listings/{id}:
    get:
      summary: Get job listing by id (JWT)
      tags: [Jobs]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Job listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobListing'
    patch:
      summary: Update job listing (company owner or admin)
      description: |
        Allowed actions:
        - Company: normal field updates on draft/pending; `submitForApproval=true`; `close=true` when active
        - Admin: `approve=true` (activates), `reject=true`
      tags: [Jobs]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobListingPatch'
      responses:
        '200':
          description: Updated listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobListing'


  /admin/monitoring:
    get:
      summary: Admin monitoring list
      description: Returns lists of items requiring admin attention based on `type`.
      tags: [Admin]
      parameters:
        - in: query
          name: type
          schema: { type: string, enum: [pending_jobs, pending_companies] }
          description: The type of pending items to list
      responses:
        '200':
          description: List of pending items
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  /admin/monitoring/overview:
    get:
      summary: Admin overview dashboard
      description: Aggregate counters and recent activity for admins.
      tags: [Admin]
      responses:
        '200':
          description: Overview stats
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobListings:
                    type: object
                    properties:
                      counts:
                        type: object
                        properties:
                          draft: { type: integer }
                          pending: { type: integer }
                          active: { type: integer }
                          closed: { type: integer }
                          total: { type: integer }
                      recent:
                        type: array
                        items:
                          type: object
                  companies:
                    type: object
                    properties:
                      counts:
                        type: object
                        properties:
                          pending: { type: integer }
                          approved: { type: integer }
                          rejected: { type: integer }
                          total: { type: integer }
                  users:
                    type: object
                    properties:
                      counts:
                        type: object
                        properties:
                          students: { type: integer }
                          companies: { type: integer }
                          admins: { type: integer }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    IdParam:
      in: path
      name: id
      required: true
      schema: { type: string }

  schemas:
    AuthResponse:
      type: object
      properties:
        accessToken: { type: string }
        refreshToken: { type: string }
        authentication:
          type: object
          properties:
            strategy: { type: string }
        user:
          $ref: '#/components/schemas/User'

    UserCreate:
      type: object
      required: [password]
      properties:
        email: { type: string, format: email }
        username: { type: string }
        password: { type: string, minLength: 6 }
        role:
          type: string
          description: Defaults to student
          enum: [student, company, admin]
        privacySetting:
          type: string
          description: Student profile privacy. Default full.
          enum: [full, restricted, private]
        profile:
          type: object
          properties:
            firstName: { type: string }
            lastName: { type: string }
            phone: { type: string }
            avatar: { type: string }
            icPassportNumber: { type: string }
        internProfile:
          type: object
          properties:
            university: { type: string }
            major: { type: string }
            graduationYear: { type: integer }
            skills: { type: array, items: { type: string } }
            preferences:
              type: object

    SearchProfileFilters:
      type: object
      properties:
        # Intern search (companies)
        fieldOfStudy: { type: string }
        preferredStartDate: { type: string, format: date-time }
        preferredEndDate: { type: string, format: date-time }
        locations: { type: array, items: { type: string } }
        salaryRange:
          type: object
          properties:
            min: { type: number }
            max: { type: number }
        # Company search (students)
        keyword: { type: string }
        companyName: { type: string }
        nature: { type: string }
        location: { type: string }
        sort: { type: string }
    SearchProfile:
      type: object
      properties:
        _id: { type: string }
        userId: { type: string }
        kind: { type: string, enum: [intern, company] }
        name: { type: string }
        filters: { $ref: '#/components/schemas/SearchProfileFilters' }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    UserPatch:
      type: object
      properties:
        privacySetting:
          type: string
          enum: [full, restricted, private]
        profile: { $ref: '#/components/schemas/UserCreate/properties/profile' }
        internProfile: { $ref: '#/components/schemas/UserCreate/properties/internProfile' }
    User:
      allOf:
        - $ref: '#/components/schemas/UserCreate'
        - type: object
          properties:
            _id: { type: string }
            isEmailVerified: { type: boolean }
            createdAt: { type: string, format: date-time }
            updatedAt: { type: string, format: date-time }
    PaginatedUsers:
      type: object
      properties:
        total: { type: integer }
        limit: { type: integer }
        skip: { type: integer }
        data:
          type: array
          items: { $ref: '#/components/schemas/User' }

    InternshipJob:
      type: object
      properties:
        title: { type: string }
        description: { type: string }
        postedAt: { type: string, format: date-time }
        duration: { type: string }
        location: { type: string }
        salaryRange:
          type: object
          properties:
            min: { type: number }
            max: { type: number }

    CompanyCreate:
      type: object
      required: [name]
      properties:
        name: { type: string }
        industry: { type: string }
        website: { type: string }
        description: { type: string }
        email: { type: string }
        phone: { type: string }
        address:
          type: object
          properties:
            street: { type: string }
            city: { type: string }
            state: { type: string }
            country: { type: string }
            zipCode: { type: string }
            fullAddress: { type: string }
        internships:
          type: array
          items: { $ref: '#/components/schemas/InternshipJob' }
    CompanyPatch:
      type: object
      properties:
        name: { type: string }
        industry: { type: string }
        website: { type: string }
        description: { type: string }
        address: { $ref: '#/components/schemas/CompanyCreate/properties/address' }
        internships:
          type: array
          items: { $ref: '#/components/schemas/InternshipJob' }

    JobListingCreate:
      type: object
      required: [title]
      properties:
        companyId: { type: string, description: Admin-only when creating for a company }
        title: { type: string }
        position: { type: string, example: intern }
        description: { type: string }
        quantityAvailable: { type: integer, default: 1 }
        location:
          type: object
          properties:
            city: { type: string }
            state: { type: string }
        salaryRange:
          type: object
          properties:
            min: { type: number }
            max: { type: number }
        pic:
          type: object
          properties:
            name: { type: string }
            phone: { type: string }
            email: { type: string }
        project:
          type: object
          properties:
            title: { type: string }
            description: { type: string }
            startDate: { type: string, format: date }
            endDate: { type: string, format: date }
            locations: { type: array, items: { type: string } }
            roleDescription: { type: string }
            areasOfInterest: { type: array, items: { type: string } }
        onboardingMaterials:
          type: array
          items:
            type: object
            properties:
              type: { type: string }
              fileKey: { type: string }
              label: { type: string }
        submitForApproval: { type: boolean, description: If true, status will be pending_approval }

    JobListingPatch:
      type: object
      properties:
        title: { type: string }
        description: { type: string }
        quantityAvailable: { type: integer }
        location: { $ref: '#/components/schemas/JobListingCreate/properties/location' }
        salaryRange: { $ref: '#/components/schemas/JobListingCreate/properties/salaryRange' }
        pic: { $ref: '#/components/schemas/JobListingCreate/properties/pic' }
        project: { $ref: '#/components/schemas/JobListingCreate/properties/project' }
        onboardingMaterials: { $ref: '#/components/schemas/JobListingCreate/properties/onboardingMaterials' }
        publishAt: { type: string, format: date-time }
        submitForApproval: { type: boolean }
        approve: { type: boolean }
        reject: { type: boolean }
        close: { type: boolean }

    JobListing:
      allOf:
        - $ref: '#/components/schemas/JobListingCreate'
        - type: object
          properties:
            _id: { type: string }
            companyId: { type: string }
            status: { type: integer, description: '0=draft,1=pending_approval,2=active,3=closed' }
            publishAt: { type: string, format: date-time }
            expiresAt: { type: string, format: date-time }
            submittedAt: { type: string, format: date-time }
            approvedAt: { type: string, format: date-time }
            closedAt: { type: string, format: date-time }
            createdAt: { type: string, format: date-time }
            updatedAt: { type: string, format: date-time }

    PaginatedJobListings:
      type: object
      properties:
        total: { type: integer }
        limit: { type: integer }
        skip: { type: integer }
        data:
          type: array
          items: { $ref: '#/components/schemas/JobListing' }
    Company:
      allOf:
        - $ref: '#/components/schemas/CompanyCreate'
        - type: object
          properties:
            _id: { type: string }
            ownerUserId: { type: string }
            logoKey: { type: string }
            verifiedStatus:
              type: integer
              description: "0=pending, 1=approved, 2=rejected"
            internshipListingCount: { type: integer }
            internshipTopTitles:
              type: array
              items: { type: string }
            createdAt: { type: string, format: date-time }
            updatedAt: { type: string, format: date-time }
    PaginatedCompanies:
      type: object
      properties:
        total: { type: integer }
        limit: { type: integer }
        skip: { type: integer }
        data:
          type: array
          items: { $ref: '#/components/schemas/Company' }


    CompanyVerificationDocument:
      type: object
      properties:
        type: { type: string, enum: [SSM_SUPERFORM, OTHERS] }
        fileKey: { type: string }
        metadata: { type: object }
    CompanyVerificationCreate:
      type: object
      required: [companyId, documents]
      properties:
        companyId: { type: string }
        documents:
          type: array
          items: { $ref: '#/components/schemas/CompanyVerificationDocument' }
    CompanyVerification:
      allOf:
        - $ref: '#/components/schemas/CompanyVerificationCreate'
        - type: object
          properties:
            _id: { type: string }
            submittedBy: { type: string }
            status: { type: integer, description: "0=pending, 1=approved, 2=rejected" }
            rejectionReason: { type: string }
            submittedAt: { type: string, format: date-time }
            reviewedAt: { type: string, format: date-time }
            reviewerId: { type: string }
    PaginatedCompanyVerifications:
      type: object
      properties:
        total: { type: integer }
        limit: { type: integer }
        skip: { type: integer }
        data:
          type: array
          items: { $ref: '#/components/schemas/CompanyVerification' }


  /employment-records:
    get:
      summary: List employment records (JWT)
      tags: [Employments]
      responses:
        '200': { description: Paged employments }
    patch:
      summary: Update employment by action (JWT)
      description: |
        Company/Admin actions: startNow, moveToClosure, complete, terminate, updatePIC, addNote, attachDoc, verifyDoc.
        Student actions: addNote, attachDoc (uploads student docs like finalReport/jobReview/companyReview).
      tags: [Employments]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action]
              properties:
                action: { type: string }
                type: { type: string, description: For attachDoc, e.g., finalReport|jobReview|companyReview }
                fileKey: { type: string, description: For attachDoc }
                text: { type: string, description: For addNote }
      responses:
        '200': { description: Updated employment }

  /employment-detail/{id}:
    get:
      summary: Get composite employment detail (JWT)
      tags: [Employments]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200': { description: Composite data including job, application, onboarding docs, latest requests, termination }

  /early-completions:
    post:
      summary: Create early completion request (Student)
      tags: [Requests]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [employmentId]
              properties:
                employmentId: { type: string }
                reason: { type: string }
                proposedCompletionDate: { type: string, format: date }
      responses:
        '201': { description: Request created }
  /early-completions/{id}:
    patch:
      summary: Decide/cancel early completion request
      tags: [Requests]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action]
              properties:
                action: { type: string, enum: [approve, reject, cancel] }
                decisionRemark: { type: string, description: 'Optional reason/remark when rejecting' }
      responses:
        '200': { description: Updated request }

  /internship-terminations:
    post:
      summary: Create internship termination request (Student or Company)
      tags: [Requests]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [employmentId, reason]
              properties:
                employmentId: { type: string }
                reason: { type: string }
                remark: { type: string }
                proposedLastDay: { type: string, format: date }
      responses:
        '201': { description: Request created }
  /internship-terminations/{id}:
    patch:
      summary: Decide/cancel internship termination request
      tags: [Requests]
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [action]
              properties:
                action: { type: string, enum: [approve, reject, cancel] }
                decisionRemark: { type: string, description: 'Optional reason/remark when rejecting' }
      responses:
        '200': { description: Updated request }

  /upload/{key}:
    get:
      summary: Get signed URL for a file (JWT)
      tags: [Files]
      parameters:
        - in: path
          name: key
          schema: { type: string }
          required: true
      responses:
        '200': { description: Signed URL and public URL }
  /upload:
    post:
      summary: Upload files (multipart/form-data)
      tags: [Files]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                document:
                  type: string
                  format: binary
                  description: Generic document field used for employment docs
      responses:
        '201': { description: Files uploaded }


  /universities:
    get:
      summary: List universities with counts (JWT)
      tags: [Talent]
      parameters:
        - in: query
          name: q
          schema: { type: string }
          required: false
      responses:
        '200':
          description: "Items: [{ name, count }]"

  /programmes:
    get:
      summary: List programmes for a university (JWT)
      tags: [Talent]
      parameters:
        - in: query
          name: university
          schema: { type: string }
          required: true
      responses:
        '200':
          description: "Items: [{ level, programme, faculty, count }]"

  /programme-candidates:
    get:
      summary: Find candidates by programme/university and filters (JWT)
      tags: [Talent]
      parameters:
        - in: query
          name: university
          schema: { type: string }
          required: true
        - in: query
          name: programme
          schema: { type: string }
        - in: query
          name: faculty
          schema: { type: string }
        - in: query
          name: level
          schema: { type: string }
        - in: query
          name: startDate
          schema: { type: string, format: date-time }
        - in: query
          name: endDate
          schema: { type: string, format: date-time }
        - in: query
          name: locations
          schema: { type: array, items: { type: string } }
          style: form
          explode: true
        - in: query
          name: salaryMin
          schema: { type: number }
        - in: query
          name: salaryMax
          schema: { type: number }
      responses:
        '200': { description: Items: candidate user profiles }
    patch:
      summary: Send invitations to selected candidates (Company JWT)
      tags: [Talent]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userIds: { type: array, items: { type: string } }
                type: { type: string, enum: [profile_access, interview], default: profile_access }
                message: { type: string }
      responses:
        '200': { description: Created invites }
